<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Parcour', 'doctrine');

/**
 * BaseParcour
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $candidat_id
 * @property string $societe
 * @property integer $effectifsociete
 * @property string $zonegeographique
 * @property string $fonction
 * @property string $intitule
 * @property string $secteur
 * @property float $remuneration
 * @property string $detailremuneration
 * @property date $datedebut
 * @property date $datefin
 * @property string $commentaire
 * @property Candidat $Candidat
 * @property Doctrine_Collection $MotsParcour
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getCandidatId()         Returns the current record's "candidat_id" value
 * @method string              getSociete()            Returns the current record's "societe" value
 * @method integer             getEffectifsociete()    Returns the current record's "effectifsociete" value
 * @method string              getZonegeographique()   Returns the current record's "zonegeographique" value
 * @method string              getFonction()           Returns the current record's "fonction" value
 * @method string              getIntitule()           Returns the current record's "intitule" value
 * @method string              getSecteur()            Returns the current record's "secteur" value
 * @method float               getRemuneration()       Returns the current record's "remuneration" value
 * @method string              getDetailremuneration() Returns the current record's "detailremuneration" value
 * @method date                getDatedebut()          Returns the current record's "datedebut" value
 * @method date                getDatefin()            Returns the current record's "datefin" value
 * @method string              getCommentaire()        Returns the current record's "commentaire" value
 * @method Candidat            getCandidat()           Returns the current record's "Candidat" value
 * @method Doctrine_Collection getMotsParcour()        Returns the current record's "MotsParcour" collection
 * @method Parcour             setId()                 Sets the current record's "id" value
 * @method Parcour             setCandidatId()         Sets the current record's "candidat_id" value
 * @method Parcour             setSociete()            Sets the current record's "societe" value
 * @method Parcour             setEffectifsociete()    Sets the current record's "effectifsociete" value
 * @method Parcour             setZonegeographique()   Sets the current record's "zonegeographique" value
 * @method Parcour             setFonction()           Sets the current record's "fonction" value
 * @method Parcour             setIntitule()           Sets the current record's "intitule" value
 * @method Parcour             setSecteur()            Sets the current record's "secteur" value
 * @method Parcour             setRemuneration()       Sets the current record's "remuneration" value
 * @method Parcour             setDetailremuneration() Sets the current record's "detailremuneration" value
 * @method Parcour             setDatedebut()          Sets the current record's "datedebut" value
 * @method Parcour             setDatefin()            Sets the current record's "datefin" value
 * @method Parcour             setCommentaire()        Sets the current record's "commentaire" value
 * @method Parcour             setCandidat()           Sets the current record's "Candidat" value
 * @method Parcour             setMotsParcour()        Sets the current record's "MotsParcour" collection
 * 
 * @package    opsearch-app
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParcour extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('parcour');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('candidat_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('societe', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('effectifsociete', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('zonegeographique', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fonction', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('intitule', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('secteur', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('remuneration', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('detailremuneration', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('datedebut', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('datefin', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('commentaire', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Candidat', array(
             'local' => 'candidat_id',
             'foreign' => 'id'));

        $this->hasMany('MotsParcour', array(
             'local' => 'id',
             'foreign' => 'parcour_id'));
    }
}